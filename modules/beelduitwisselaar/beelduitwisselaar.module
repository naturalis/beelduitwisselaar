<?php
global $lastview;
global $nohook;
$nohook = 0;

/**
 * Defaults.
 */
define('IMAGEOWNER', 'admin');
define('IMAGEIMPORTFOLDER', '/var/www/drupal/import/');

define('BEELDUITWISSELAARLICENSETERMID', 75);
define('NATUURNLLICENSETERMID', 76);

define('NSR_LINK', 'http://www.nederlandsesoorten.nl/nsr/concept/');
define('LINNAEUS_SEARCH','http://www.nederlandsesoorten.nl/linnaeus_ng/app/views/webservices/search.php');

/**
 * Global variables, specify nodeids of the predefined email templates
 */
define('MAILNEWSUBMISSION', "1");
define('MAILACCEPTSUBMISSION', "4");
define("MAILDECLINESUBMISSION", "2");
define("MAILWAITSUBMISSION", "5");
define("MAILASSIGNSUBMISSION", "3");

/**
 * Global variables, define states of images
 */
define("STATUSNEW", 0);
define("STATUSEXPERT", 1); //naarexpert
define("STATUSPOSITIVE", 2); //evaluatiepositief
define("STATUSNEGATIVE", 3); //evaluatienegatief
define("STATUSWAIT", 4); //evaluatiewacht
define("STATUSDONE", 5); //afgerond
define("STATUSDELETED", 6); //verwijderd

/**
 * Implements hook_init()
 *
 * Retrieves variables
 * Sets the lastview variable
 *
 */
function beelduitwisselaar_init()
{
    global $lastview;

    drupal_add_css(drupal_get_path('module', 'beelduitwisselaar') . '/css/buit.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

    if (variable_get("beelduitwisselaar_action") && variable_get("beelduitwisselaar_entityid")) {
        //Handle pending action
        if ((variable_get("beelduitwisselaar_mailrequired") && variable_get("beelduitwisselaar_mailsend")) || !variable_get("beelduitwisselaar_mailrequired")) {

            $action = variable_get("beelduitwisselaar_action", NULL);
            $entityid = variable_get("beelduitwisselaar_entityid", NULL);

            if ($action === MAILDECLINESUBMISSION) {
                entity_delete("field_collection_item", $entityid);
                variable_del("beelduitwisselaar_action");
                variable_del("beelduitwisselaar_entityid");
                variable_del("beelduitwisselaar_mailrequired");
                variable_del("beelduitwisselaar_mailsend");
            }
        }
    }

    if (empty($lastview)) {
        $lastview = variable_get("beelduitwisselaar_lastview", '');
    }

    $beelduitwisselaar_paths = ['afbeeldingen-expert-all', 'afbeeldingen', 'afbeeldingen-geevalueerd-all', 'afbeeldingen-wachtrij'];
    if (in_array(strtolower(current_path()), $beelduitwisselaar_paths, true)) {
        $lastview = current_path();

        variable_set('beelduitwisselaar_lastview', $lastview);
    }
}

/**
 * Returns the user to the previous view.
 */
function beelduitwisselaar_goto_lastview() {
    global $lastview;

    drupal_goto('/' . $lastview);
}


/**
 * Displays the statustext corresponding to statuscode
 */
function beelduitwisselaar_statustext($statuscode)
{
    $status_texts = [
        STATUSNEW => t('Nieuw'),
        STATUSEXPERT => t('In behandeling bij validator'),
        STATUSPOSITIVE => t('Gevalideerd'),
        STATUSNEGATIVE => t('Afgekeurd'),
        STATUSWAIT => t('In de wachtrij'),
        STATUSDONE => t('Goedgekeurd en gepubliceerd'),
        STATUSDELETED => t('Verwijderd')
    ];

    return $status_texts[$statuscode];
}

/**
 * implementation of hook_menu()
 *
 * Used for configuring the beelduitwisselaar
 *
 */
function beelduitwisselaar_menu()
{
    $items['admin/config/beelduitwisselaar'] = array(
        'title' => t('Beelduitwisselaar config'),
        'description' => t('Configuration for the beelduitwisselaar module'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('beelduitwisselaar_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['webservice'] = array(
        'page callback' => 'beelduitwisselaar_newimages_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['webservice/newimages'] = array(
        'page callback' => 'beelduitwisselaar_newimages_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/selectexpertise'] = array(
        'title' => t('Beeld(en) toekennen aan validator'),
        'page callback' => 'beelduitwisselaar_selectexpertise_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/selectexpert'] = array(
        'title' => t('Beeld(en) toekennen aan validator'),
        'page callback' => 'beelduitwisselaar_selectexpert_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/kiesexpert'] = array(
        'title' => t('Beeld(en) toekennen aan validator'),
        'page callback' => 'beelduitwisselaar_kiesexpert_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/wachtrij'] = array(
        'title' => t('Beeld(en) in de wachtrij plaatsen'),
        'page callback' => 'beelduitwisselaar_wachtrij_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/kiesmail'] = array(
        'title' => t('Kies mail template'),
        'page callback' => 'beelduitwisselaar_kiesmail_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/sendmail'] = array(
        'title' => t('Mail afronden en verzenden'),
        'page callback' => 'beelduitwisselaar_sendmail_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['beelduitwisselaar/createmail/%/%/%'] = array(
        'title' => t('Mail aanpassen'),
        'page callback' => 'beelduitwisselaar_createmail_callback',
        'page arguments' => array(1, 2, 3),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}


/**
 * Form used to configure the beelduitwisselaar module.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function beelduitwisselaar_config_form($form, &$form_state)
{
    $form['beelduitwisselaar_config'] = array(
        '#type' => 'fieldset',
        '#title' => t('Beelduitwisselaar config')
    );
    $form['beelduitwisselaar_config']['beelduitwisselaar_imageowner'] = array(
        '#type' => 'textfield',
        '#title' => t('Image owner (user)'),
        '#default_value' => variable_get('beelduitwisselaar_imageowner', IMAGEOWNER),
        '#size' => 40,
        '#maxlength' => 60,
        '#description' => t('The user to which all images will be assigned.'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}


/**
 * @return string
 */
function beelduitwisselaar_kiesmail_callback()
{
    $result = t("Kies hier een bestaand mailtemplate om naar de geselecteerde gebruikers te sturen. De gebruikers ontvangen alleen een mail als ze de optie om mail te ontvangen van het systeem aan hebben staan. Dit kan iedere gebruiker in zijn eigen profiel configureren. <a href='/node/add/mail'>Nieuwe mail templates</a> kunnen door de admin user worden aangemaakt, en verschijnen dan automatisch in het lijstje hieronder.<br />&nbsp;<br /><b>Let op</b>: Onderstaande mails worden ook automatisch verstuurd! Alleen versturen ter herinnering of als u de inhoud van de mail wilt aanpassen.<br />&nbsp;<br />Beschikbare variabelen (afhankelijk van de context van de mail) zijn: %%beeldnaam%%, %%expertnaam%%, %%expert_link%%, %%nsr_link%%, %%bestandsnamen%%");

    return $result;
}

/**
 * @param $argument1
 * @param $argument2
 * @param $argument3
 * @return mixed
 */
function beelduitwisselaar_createmail_callback($argument1, $argument2, $argument3)
{
    $build = [];

    $build['content'] = [
        'inleidendetekst' => [
            '#markup' => 'beelduitwisselaar createmail callback',
        ],
        'formulier' => drupal_get_form('beelduitwisselaar_mail_form'),
    ];

    return $build;
}


/**
 * @return mixed
 */
function beelduitwisselaar_sendmail_callback()
{
    $build['content'] = [
        'inleidendetekst' => [
            '#markup' => 'beelduitwisselaar_sendmail callback',
        ],
        'formulier' => drupal_get_form('beelduitwisselaar_mail_form'),
    ];

    return $build;
}

/**
 * @param $form
 * @param $form_state
 * @return array
 */
function beelduitwisselaar_mail_form($form, &$form_state)
{
    $myusermail = [];
    $myurl = explode('/', request_uri());

    $myusers = urldecode($myurl[3]);
    foreach (explode(',', $myusers) as $mailuser) {
        $tempuser = user_load($mailuser);

        $myusermail[] = $tempuser->mail;
    }

    $myusermails = implode(',', $myusermail);

    $nodeid = $myurl[4];
    $beeldid = $myurl[5];
    $mailnode = node_load($nodeid);

    // @todo: check why form was emptied here?
    // $form = array();

    $form['mailto'] = array(
        '#type' => 'textfield',
        '#title' => t('Versturen naar'),
        '#size' => 60,
        '#maxlength' => 600,
        '#required' => TRUE,
        '#description' => t('Iedere gebruiker ontvangt een aparte email.'),
        '#value' => $myusermails,
        '#disabled' => TRUE,
    );
    $form['mailsubject'] = array(
        '#type' => 'textfield',
        '#title' => t('Onderwerp'),
        '#size' => 60,
        '#maxlength' => 600,
        '#required' => TRUE,
        '#value' => $mailnode->title,
        '#disabled' => TRUE,
    );
    $form['mailbericht'] = array(
        '#type' => 'textarea',
        '#title' => t('Bericht'),
        '#size' => 60,
        '#rows' => 32,
        '#wysiwyg' => false,
        '#maxlength' => 600,
        '#required' => TRUE,
        '#value' => makemail($myusers[0], $nodeid, $beeldid),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Verstuur mail',
    );
    return $form;
}

/**
 * Makemail creates the mail
 *
 * @param $userid
 * @param $mailnodeid
 * @param $beeldid
 * @return mixed
 */
function makemail($userid, $mailnodeid, $beeldid)
{
    $node = node_load($mailnodeid);
    $mailbody = $node->body['und'][0]['value'];

    $user = user_load($userid);
    $beeldnode = entity_load_single('field_collection_item', $beeldid);

    $filename = '';
    if (!empty($beeldnode->field_newimage['und'][0])) {
        $filename = empty($beeldnode->field_newimage['und'][0]['filename']) ? $beeldnode->field_newimage['und'][0]['origname'] : $beeldnode->field_newimage['und'][0]['filename'];
    }

    $mymail = str_replace(
        [
            '%%nsr_link%%',
            '%%bestandsnamen%%',
            '%%beeldnaam%%',
            '%%expertnaam%%',
            '%%expert_link%%'
        ],
        [
            "<a href='" . NSR_LINK . $beeldnode->field_nlsr['und'][0]['value']['#value'] . "'>" . $beeldnode->field_soort_taxon['und'][0]['value']['#value'] . "</a>",
            $beeldnode->field_newimage['und'][0]['filename'],
            $filename,
            $user->name,
            "<a href='" . $base_url . "/?q=afbeeldingen-expert'>" . $user->name . "</a>"
        ],
        $mailbody
    );

    return $mymail;
}


/**
 * @param $to
 * @param $subject
 * @param $mail
 * @return mixed
 * @throws Exception
 */
function beelduitwisselaar_sendmail($to, $subject, $mail)
{
    $module = 'beelduitwisselaar';
    $key = 'key';
    $language = language_default();
    $params = array();
    $from = NULL;

    $message = drupal_mail($module, $key, $to, $language, $params, $from, FALSE);

    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
    $message['subject'] = $subject;
    $message['body'] = [];
    $message['body'][] = $mail;

    try {
        $system = drupal_mail_system($module, $key);
        $message = $system->format($message);
        $result = $system->mail($message);
        watchdog("beelduitwisselaar", "Send mail to $to ($subject)");
        variable_set("beelduitwisselaar_mailsend", 1);

        return $result;
    } catch (Exception $e) {
        watchdog("beelduitwisselaar", "Send mail to $to ($subject) - failed",['msg' => $e->getMessage()], WATCHDOG_DEBUG);
    }
}

/**
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function beelduitwisselaar_mail_form_submit($form, &$form_state)
{
    global $base_url;
    $myurl = explode('/', request_uri());

    $myusers = urldecode($myurl[3]);
    foreach (explode(',', $myusers) as $mailuser) {
        $tempuser = user_load($mailuser);
        $mymail = $form_state['input']['mailbericht'];

        //Add check if user allows mail receipt
        $myusermail[] = $tempuser->mail;
        $mymail = str_replace(
            [
                '%%beeldnaam%%',
                '%%nsr_link%%',
                '%%bestandsnamen%%',
                '%%expertnaam%%',
                '%%expert_link%%'
            ],
            [
                '',
                '',
                '',
                $tempuser->name,
                "<a href='" . $base_url . "/?q=afbeeldingen-expert'>" . $tempuser->name . "</a>"
            ], $mymail);

        $subject = (empty($form['mailsubject']['#value'])) ? $mymail->title ? $form['mailsubject']['#value'];

        if ($tempuser->field_notificatie['und'][0]['value'] != 0) {
            try {
                beelduitwisselaar_sendmail($tempuser->mail, $subject, $mymail);
                drupal_set_message(t("Mail verstuurd naar: @mail", ['@mail' => $tempuser->mail]));
            } catch (Exception $e) {
                drupal_set_message(t("Mail niet verstuurd naar: @mail<br>@message", ['@mail' => $tempuser->mail, $e->getMessage()]), 'error');
                watchdog("beelduitwisselaar - beelduitwisselaar mail form submit", "Send mail to $to ($subject) - failed",['msg' => $e->getMessage()], WATCHDOG_DEBUG);
            }
        } else {
            drupal_set_message(t('Mail <b>niet</b> verstuurd naar: @mail (vanwege gebruikersinstelling)', ['@mail' => $tempuser->mail]));
        }
    }

    variable_set('beelduitwisselaar_action', 2);
    variable_set('beelduitwisselaar_mailrequired', 1);

    beelduitwisselaar_goto_lastview();
}

/**
 * @return string
 */
function beelduitwisselaar_selectexpertise_callback()
{
    watchdog("beelduitwisselaar", "Select expertise callback",['backtrace' => debug_backtrace() ], WATCHDOG_DEBUG);
    return '';
}

/**
 *
 * @return string
 */
function beelduitwisselaar_selectexpert_callback()
{
    $result = '';

    $resultspecialisatie = db_query("SELECT name FROM {taxonomy_term_data} WHERE tid = :tid", [':tid' => $_GET['tid']])->fetchField();

    $result .= "<div class='experts'><div class=taxonomy'><h2>Wachtrij</h2><a href='/beelduitwisselaar/wachtrij" . "?nids=" . $_GET['nids'] . "'>Plaats beeld in de wachtrij</a><br /><br /><h2>Validatoren $resultspecialisatie</h2></div>Klik op een naam om beeld(en) aan deze validator toe te kennen.<br /><br />";

    $resultusers = db_query("SELECT * FROM {users} WHERE uid IN (SELECT entity_id FROM {field_data_field_specialisatie} WHERE field_specialisatie_tid = :tid", [':tid' => $_GET['tid']]);

    $aantal = $resultusers->rowCount();
    if ($resultusers->rowCount() == 0) {
        $result .= "Er zijn nog geen validatoren beschikbaar binnen dit expertisegebied. Ga terug naar het overzicht van <a href='/?q=afbeeldingen'>nieuwe beelden</a> of <a href='/?q=email-expert'>ken het betreffende expertisegebied toe</a> aan een bestaande validator.";
    }

    foreach ($resultusers as $item) {
        $result .= "<div class='user'><a href='/beelduitwisselaar/kiesexpert?uid=" . $item->uid . "&nids=" . $_GET['nids'] . "&tid=" . $_GET['tid'] . "' >" . $item->name . "</a></div>";
    }

    $result .= "</div>";
    return $result;
}

/**
 * wachtrij is now integrated with the expert selection screen. This way we avoid the action system
 * which was causing problems
 * @throws Exception
 */
function beelduitwisselaar_wachtrij_callback()
{
    global $nohook;

    $nohook = 1;

    $mymail = node_load(MAILWAITSUBMISSION);
    drupal_set_message(t('Beeld(en) in de wachtrij gezet'));

    $myimages = explode(',', $_GET['nids']);
    $entities = entity_load('field_collection_item', $myimages);
    foreach ($entities as $entity) {
        $entity->field_status['und'][0]['value'] = STATUSWAIT;
        if (isset($entity->item_id)) {
            $entity->save(TRUE);
        } else {
            $entity->save();
        }

        $mail = $mymail->body['und'][0]['value'];
        $mail = str_replace(
            [
                '%%beeldnaam%%',
                '%%expertnaam%%',
                '%%expert_link%%',
                '%%bestandsnamen%%',
                '%%nsr_link%%'
            ],
            [
                $entity->field_newimage['und'][0]['filename'],
                $user->name,
                "<a href='" . $base_url . "/afbeeldingen-expert'>" . $user->name . "</a>",
                $entity->field_newimage['und'][0]['filename'],
                $nsr_link
            ],
            $mail
        );

        $fotograafid = $entity->field_fotograaf['und'][0]['target_id'];
        $defotograaf = user_load($fotograafid);
        $to = $defotograaf->mail;
        $subject = $mymail->title;

        try {
            beelduitwisselaar_sendmail($to, $subject, $mail);
        } catch (Exception $e) {
            watchdog("beelduitwisselaar - beelduitwisselaar wachtrij callback", "Send mail to $to ($subject) - failed",['msg' => $e->getMessage()], WATCHDOG_DEBUG);
            drupal_set_message(t("Mail niet verstuurd naar: @mail<br>@message", ['@mail' => $tempuser->mail, $e->getMessage()]), 'error');
        }
    }

    drupal_flush_all_caches();
    $nohook = 0;

    beelduitwisselaar_goto_lastview();
}

/**
 *
 */
function beelduitwisselaar_kiesexpert_callback()
{
    watchdog('beelduitwisselaar', "User " . $_GET['uid'] . " assigned " . $_GET['nids'] . " taxonomie: " . $_GET['tid']);

    $validator = db_query('SELECT name FROM {users} WHERE uid = :uid', [':uid' => $_GET['uid']])->FetchField();
    drupal_set_message(t('Beeld(en) toegekend aan de validator @validator'), ['@validator' => $validator]);

    $myimages = explode(',', $_GET['nids']);
    $entities = entity_load('field_collection_item', $myimages);
    foreach ($entities as $entity) {
        $entity->field_beeldexpert['und'][0]['target_id'] = $_GET['uid'];
        $entity->field_beeldexpert['und'][0]['target_type'] = "user";

        $entity->field_groep['und'][0]['tid'] = $_GET['tid'];
        $entity->field_status['und'][0]['value'] = STATUSEXPERT;
        if (isset($entity->item_id)) {
            search_api_track_item_change('field_collection_item', array($entity->item_id));
            $entity->save(TRUE);
        } else {
            $entity->save();
        }
        watchdog('beelduitwisselaar', "User " . $_GET['uid'] . " assigned " . $entity->item_id . " taxonomie: " . $_GET['tid'] . " done.");
    }
    drupal_flush_all_caches();

    beelduitwisselaar_goto_lastview();
}


/**
 *
 */
function beelduitwisselaar_newimages_callback()
{
    global $base_path, $base_root;

    // check if there's a date and of the right format
    if (!isset($_GET['date']) || strlen($_GET['date']) < 5) {
        $error[] = array(
            'required' => 'date',
            'format' => 'yyyymmddhhmmss',
            'example' => $base_root . $base_path . current_path() . "?date=" . date("YmdHis"),
        );
        if (!isset ($_GET['start'])) {
            $error[] = array(
                'optional' => 'start',
                'format' => 'integer',
                'default' => '0',
                'example' => $base_root . $base_path . current_path() . "?date=" . date("YmdHis") . "&start=150",
            );
        }
        if (!isset ($_GET['limit'])) {
            $error[] = array(
                'optional' => 'limit',
                'format' => 'integer',
                'default' => '100',
                'example' => $base_root . $base_path . current_path() . "?date=" . date("YmdHis") . "&limit=50",
            );
        }
        if (!isset ($_GET['callback'])) {
            $error[] = array(
                'optional' => 'callback',
                'format' => 'string',
                'example' => $base_root . $base_path . current_path() . "?date=" . date("YmdHis") . "&callback=p",
            );
        }

        header('Content-Type: application/json');
        echo json_encode($error);
        return;
    }
    $mydate = $_GET['date'];
    $mystart = (isset($_GET['start'])) ? (int)$_GET['start'] : 0;
    $myaantal = (isset($_GET['limit'])) ? (int)$_GET['limit'] : 100;

    $sql = "SELECT a.entity_id AS nid FROM field_data_field_afbeeldingen a, field_collection_item c, field_data_field_status s, field_data_field_datum d, field_data_field_datum_publicatie p WHERE p.entity_id = s.entity_id AND (FROM_UNIXTIME(p.field_datum_publicatie_value)) > (:pubdate) AND d.entity_id = s.entity_id AND c.item_id = s.entity_id AND a.field_afbeeldingen_value = s.entity_id AND s.entity_type = 'field_collection_item' AND s.field_status_value IN (:status) LIMIT :start,:aantal";

    $myresult = db_query($sql, [
        ':pubdate' => date("Y-m-d H:i:s", strtotime($mydate)),
        ':status' => STATUSDONE,
        ':start' => $mystart,
        ':aantal' => $myaantal
        ]
    );
    foreach ($myresult as $item) {
        $mynodes[] = $item->nid;
    }
    if (empty($mynodes)) {
        $xarray = array(
            'requested_date' => date("Y-m-d H:i:s", strtotime($mydate)),
            'exported' => date("Y-m-d H:i:s"),
            'count' => 0,
            'start' => $mystart,
            'limit' => $myaantal,
            'images' => NULL,
        );
    } else {
        $sql = "SELECT field_afbeeldingen_value FROM {field_data_field_afbeeldingen} a WHERE a.entity_id IN (" . implode($mynodes, ",") . ")";
        $myresult = db_query($sql);
        foreach ($myresult as $item) {
            $myimages[] = $item->field_afbeeldingen_value;
        }

        $entity = entity_load('field_collection_item', $myimages);
        $mycount = 0;

        foreach ($entity as $beeld) {
            if ($beeld->field_status['und'][0]['value'] === STATUSDONE) {
                $mycount++;

                $myfotograaf = user_load($beeld->field_fotograaf['und'][0]['target_id']);
                $license = taxonomy_term_load($beeld->field_license['und'][0]['tid']);
                $myexpert = user_load($beeld->field_beeldexpert['und'][0]['target_id']);

                $beeldarray["dateCreated"] = date("Y-m-d H:i:s", $beeld->field_created['und'][0]['value']);
                $beeldarray["datePublished"] = date("Y-m-d H:i:s", $beeld->field_datum_publicatie['und'][0]['value']);

                $beeldarray["filename"] = $beeld->field_newimage['und'][0]['filename'];
                $beeldarray["url"] = $base_root . $base_path . "sites/default/files/" . $beeld->field_newimage['und'][0]['filename'];
                $beeldarray["nsrId"] = $beeld->field_nlsr['und'][0]['value'];
                $beeldarray["datePhoto"] = $beeld->field_datum['und'][0]['value'];
                $beeldarray["locationPhoto"] = $beeld->field_locatie['und'][0]['value'];
                $beeldarray["description"] = $beeld->field_textsoortenregister['und'][0]['value'];
                $beeldarray["photographer"] = $myfotograaf->field_voornaam['und'][0]['value'] . " " . $myfotograaf->field_achternaam['und'][0]['value'];
                $beeldarray["photographerid"] = $beeld->field_fotograaf['und'][0]['target_id'];
                $beeldarray["photographerContact"] = $myfotograaf->field_contact['und'][0]['value'];
                $beeldarray["copyrightPhoto"] = $license->name;
                $beeldarray["validator"] = $myexpert->field_voornaam['und'][0]['value'] . " " . $myexpert->field_achternaam['und'][0]['value'];
                $beeldarray["validatorid"] = $beeld->field_beeldexpert['und'][0]['target_id'];

                $ximages[] = $beeldarray;
            }
        }

        $xarray = array(
            "requested_date" => date("Y-m-d H:i:s", $mydate),
            "exported" => date("Y-m-d H:i:s"),
            "count" => $mycount,
            "start" => $mystart,
            "limit" => $myaantal,
            "images" => $ximages,
        );
    }

    header('Content-Type: application/json');
    if (isset ($_GET['callback'])) {
        print($_GET['callback'] . '(' . json_encode($xarray) . ')');
    } else {
        print(json_encode($xarray));
    }
}

/**
 * @return mixed
 */
function beelduitwisselaar_block_info()
{

    $blocks['beelduitwisselaar_imgblock'] = array(
        'info' => t('Beelduitwisselaar: Image block'),
    );

    $blocks['beelduitwisselaar_block'] = array(
        'info' => t('Beelduitwisselaar: Soortenregister lookup'),
        '#attached' => [
            'css' => [
                drupal_get_path('module', 'beelduitwisselaar') . '/css/modal-message.css',
            ],
        ],
    );

    $blocks['beelduitwisselaar_userblock'] = array(
        'info' => t('Beelduitwisselaar: Soortenregister user lookup'),
        '#attached' => [
            'css' => [
                drupal_get_path('module', 'beelduitwisselaar') . '/css/modal-message.css',
            ],
        ],
    );

    return $blocks;
}

function beelduitwisselaar_block_imgblock() {
    global $user;

    $block = [];

    $block['content'] = '';
    $nodeid = 0;
    if ((arg(0) === 'field-collecion') && arg(1) === 'field-afbeeldingen') {
        $nodeid = is_numeric(arg(2)) ? arg(2) : $nodeid;
    }
    if (arg(0) === 'beelddetail') {
        $nodeid = is_numeric(arg(1)) ? arg(1) : $nodeid;
    }

    $bldfilename = db_query(
        'SELECT filename FROM {file_managed} f, {field_data_field_newimage} i WHERE i.entity_id = :nodeid AND i.field_newimage_fid = f.fid ',
        [':nodeid' => $nodeid]
    )->fetchField();

    $bldstatus = db_query(
        'SELECT field_status_value FROM {field_data_field_status} s WHERE s.entity_id = :nodeid',
        [':nodeid' => $nodeid]
    )->fetchField();

    $fotograaf = db_query(
       'SELECT field_fotograaf_target_id  from field_data_field_fotograaf WHERE entity_id = :nodeid',
        [':nodeid' => $nodeid]
    )->fetchField();
    $bldfotograaf = user_load($fotograaf);

    $collectionItem = entity_load_single("field_collection_item", $nodeid);

    $datecreated = date('d-m-Y',$collectionItem->field_created['und'][0]['value']);
    $datesubmit = date('d-m-Y',$collectionItem->field_datum['und'][0]['value']);
    $licenseTerm = taxonomy_term_load($collectionItem->field_license['und'][0]['tid']);

    $afbeeldcomment = t('(klik op de bestandsnaam om beeld op volledige grootte te bekijken)');
    $block['content'] .= <<<JS1
<script type='text/javascript'>
jQuery(document).ready(
    function () {
        document.getElementById('edit-field-opmerkingen-und-0-value').style.height = document.getElementById('edit-field-opmerkingen-und-0-value').scrollHeight + 'px';
        document.getElementById('edit-field-beeldevaluatie-und-0-value').style.height = document.getElementById('edit-field-beeldevaluatie-und-0-value').scrollHeight + 'px';
	}
);
</script>
<b>Beeld</b><br /><a href='/sites/default/files/$bldfilename' class='colorbox' rel=''><img src='/sites/default/files/$bldfilename' width='220px' class='colorbox' style='float:left;margin-right:10px;margin-bottom:10px;' /></a><b>Bestand</b>: <a href='/sites/default/files/$bldfilename' target='_blank' rel=''><img class='file-icon' alt='' title='image/jpeg' src='/modules/file/icons/image-x-generic.png' /> " . $bldfilename . "</a><br /><span style='font-size: 10px;margin-left: 75px;'>${$afbeeldcomment}</span><br /><br />";
<b>Fotograaf</b>: 
<a href='mailto:{$bldfotograaf->mail}'>{$bldfotograaf->field_voornaam['und'][0]['value']} {$bldfotograaf->field_achternaam['und'][0]['value']} <i class='ion-email'></i></a><br><br>
JS1;

    $block['content'] .= "<b>" . t('Datum van inzenden') .  "</b>: $datecreated<br>";
    $block['content'] .= "<b>" . t('Datum van opname') . "</b>: $datesubmit<br>";
    $block['content'] .= (is_object($licenseTerm) ? "<b>" . t('Licentie') . "</b>: " . $licenseTerm->name . "<br>" : '';
    $block['content'] .= "<br><b>" . t('Status') . "</b>: <img class='status' width='24px' src='/sites/all/modules/beelduitwisselaar/img/$bldstatus.png' title='(Status: " . beelduitwisselaar_statustext($bldstatus) . ")' /> " . beelduitwisselaar_statustext($bldstatus) . "<br>";

    if (array_intersect(['admin', 'administrator'], array_values($user->roles)) && !empty($tmpnode->field_beeldexpert['und'][0]['target_id'])) {
        $tmpuser = user_load($tmpnode->field_beeldexpert['und'][0]['target_id']);
        $block['content'] .= "<b>" . t('Validator') . "</b>: " . $tmpuser->name . "<br>";
    }
    $block['content'] .= "<br style='clear:both;' clear='all' />";

    return $block;
}

/**
 * @return array
 */
function beelduitwisselaar_block_block() {
    global $user;

    $block = [];
    if (arg(0) === 'field-collection' && arg(1) === 'field-afbeeldingen' && is_numeric(arg(2))) {
        $nodeid = arg(2);
        $tmpnode = entity_load_single("field_collection_item", $nodeid);
        $myname = $tmpnode->field_soort_taxon['und'][0]['value'];
    }
    $searchcomment = t('Zoek en selecteer een naam uit het Nederlands Soortenregister. <b>Let op</b>: Dit veld is verplicht. Als je de naam van de soort niet weet, dan graag de naam van het hogere taxon opgeven (genus, familie, enz.).<br>Indien onjuist: <a href="#" onclick="undo();">Nieuwe/andere naam selecteren.</a>');
    $searchurl = variable_get('beelduitwisselaar_block_string', 'www.nederlandsesoorten.nl/linnaeus_ng/app/views/webservices/search.php');
    $block['content'] = <<<JAVASCRIPT
<script type="text/javascript">
jQuery(document).ready(function(){
  jQuery('#validated').style.visibility="hidden";
  if(jQuery('#edit-field-soort-taxon-und-0-value').value.length > 2) {
    jQuery('#group').setAttribute("disabled","disabled");
    jQuery('#edit-opslaan').style.visibility="hidden";
    jQuery('#validated').style.visibility="visible";
  }
  jQuery('#group').value = jQuery('#edit-field-soort-taxon-und-0-value').value;
});

function setId(ele) {
  jQuery('#edit-field-nlsr-und-0-value').value=ele;
  jQuery('#validated').style.visibility="visible";
  clear();
}

function setName(ele) {
  jQuery('#edit-field-soort-taxon-und-0-value').value=ele;
  jQuery('#group').val(ele);
  clear();
  jQuery('selectlijst').innerHTML={$searchcomment};
  jQuery('#validated').style.visibility="visible";
  jQuery('#group').setAttribute("disabled","disabled");  
}

function clear() {
  jQuery('#selectlijst').innerHTML='';
  jQuery('#validated').style.visibility="hidden";
}

function undo() {
  jQuery('#group').removeAttribute('disabled');
  jQuery('#group').value='';
  jQuery('#edit-field-nlsr-und-0-value').value = '';
  jQuery('#edit-field-soort-taxon-und-0-value').value = '';
  jQuery('#validated').style.visibility="hidden";
  jQuery('#group').focus();  
}

function setSuggestionId(ele) {
    oFormObject = document.forms['formSearchFacetsSpecies'];
    if(oFormObject.elements["group"].value.length > 2) {
        jQuery.getJSON(
        '//{$searchurl}?pid=1&text=' + oFormObject.elements["group"].value + '&max=1000&callback=',
        {tagmode: "any", format: "json"},
        function(data) {
            clear();
            jQuery.each(data.results, function(i,item){
              var divclass = (i%2) ? "even" : "oneven";
              jQuery('<div class="' +  divclass + '"><a href="#" onclick="setId(\'' + item.nsr_id + '\');setName(\'' + item.name + '\');document.getElementById(\'validated\').style.visibility=\'visible\';">' + item.label + '</a></div>').appendTo('#selectlijst');
              if ( i == 50 ) return false;
            });
        }
        );
    }
};

</script>
<form method="get" action="" id="formSearchFacetsSpecies" name="formSearchFacetsSpecies" style="clear:both;">
<b>Soort/taxon</b><br />
<input size="83" class="field" id="group" name="group" autocomplete="off" value="{$myname}" type="text" onClick="setSuggestionId();" onKeyup="setSuggestionId();">
<img id="validated" style="float:right;margin:5px;" src="/sites/all/modules/beelduitwisselaar/img/2.png" alt="Gevalideerd" />
</form>

<div style="font-size: 0.85em;" id="selectlijst">{$searchcomment}</div>
JAVASCRIPT;

    return $block;
}

/**
 * Implements hook_block_view().
 */
function beelduitwisselaar_block_view($delta = '')
{
    global $user;
    $block = array();

    if ($delta === 'beelduitwisselaar_imgblock') {
        $block = beelduitwisselaar_block_imgblock();
    }
    if ($delta === 'beelduitwisselaar_block') {
        $block = beelduitwisselaar_block_block();
    }

    return $block;
}

/**
 * Implements hook_block_configure
 *
 * @param string $delta
 * @return array
 */
function beelduitwisselaar_block_configure($delta = '')
{
    $form = array();
    if ($delta == 'beelduitwisselaar_block') {
        $form['beelduitwisselaar_block_string'] = array(
            '#type' => 'textfield',
            '#title' => t('Service URL'),
            '#size' => 80,
            '#description' => t('De URL naar de soortenregister webservice.') . "<br>" . t('Bijvoorbeeld') . ': www.nederlandsesoorten.nl/linnaeus_ng/app/views/webservices/search.php?pid=1&start=10&text=zandhagedis&max=1000&callback=callMeBack',
            '#default_value' => variable_get('beelduitwisselaar_block_string', LINNAEUS_SEARCH),
        );
    }
    return $form;
}


/**
 *
 * Implements hook_action_info
 *
 */
function beelduitwisselaar_action_info()
{
    return array(
        'beelduitwisselaar_beeldplaatswacht_action' => array(
            'label' => t('Beelduitwisselaar: Plaats in Wachtrij'),
            'vbo_configurable' => TRUE,
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_beeldwachtrij' => array(
            'label' => t('Beelduitwisselaar: Wachtrij mail'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_beeldgepubliceerd' => array(
            'label' => t('Beelduitwisselaar: Gepubliceerd'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_beelddetermineren' => array(
            'label' => t('Beelduitwisselaar: Determineren'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_ontvangstbevestiging' => array(
            'label' => t('Beelduitwisselaar: Ontvangstbevestiging'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_afwijzen' => array(
            'label' => t('Beelduitwisselaar: Afwijzen'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),

        'beelduitwisselaar_general_action' => array(
            'label' => t('Beelduitwisselaar: A general action'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_publish_action' => array(
            'label' => t('Beelduitwisselaar: Publish'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_form2node_action' => array(
            'type' => 'node',
            'label' => t('Beelduitwisselaar: Change beelduitwisselaar-node to ml-node'),
            'configurable' => FALSE,
            'triggers' => array(
                'node_update',
            ),
        ),
        'beelduitwisselaar_maillijst_action' => array(
            'type' => 'system',
            'label' => t('Beelduitwisselaar: Mail list of images and status to user'),
            'configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'beelduitwisselaar_selectexpert_action' => array(
            'type' => 'node',
            'label' => t('Beelduitwisselaar: Select validator'),
            'configurable' => FALSE,
            'triggers' => array('any'),
            'aggregate' => TRUE,
        ),
    );
}

// @todo: kan weg?
function beelduitwisselaar_beeldplaatswacht_action(&$entity, $context = array())
{
    watchdog('beelduitwisselaar', 'beelduitwisselaar_beeldplaatswacht_action fired', [], WATCHDOG_DEBUG);
}

/**
 * Implements hook_publish_action
 *
 * @param $entity
 * @param array $context
 * @throws Exception
 */
function beelduitwisselaar_publish_action(&$entity, $context = array(), [], WATCHDOG_DEBUG)
{
    global $user;
    global $base_url;

    watchdog('beelduitwisselaar', 'beelduitwisselaar_publish_action fired');
    if (!empty($context['field_collection_item'])) {

        $myentity = entity_load_single("field_collection_item", $entity->item_id);
        $myentity->field_status['und'][0]['value'] = STATUSDONE;
        $myentity->save();

        //Stuur mail wacht
        $mymail = node_load(MAILACCEPTSUBMISSION);
        $mail = $mymail->body['und'][0]['value'];
        $mail = str_replace(
            [
                "%%beeldnaam%%",
                "%%expertnaam%%",
                "%%expert_link%%",
                "%%nsr_link%%",
                "%%bestandsnamen%%"
            ],
            [
                $entity->field_newimage['und'][0]['filename'],
                $user->name,
                "<a href='" . $base_url . "/?q=afbeeldingen-expert'>" . $user->name . "</a>",
                "<a href='" . NSR_LINK . $entity->field_nlsr['und'][0]['value']['#value'] . "'>" . $entity->field_soort_taxon['und'][0]['value']['#value'] . "</a>",
                $entity->field_newimage['und'][0]['filename']
            ],
            $mail
        );

        $fotograafid = $entity->field_fotograaf['und'][0]['target_id'];
        $defotograaf = user_load($fotograafid);

        $to = $defotograaf->mail;
        $subject = $mymail->title;

        try {
            beelduitwisselaar_sendmail($to, $subject, $mail);
        } catch (Exception $e) {
            watchdog("beelduitwisselaar - beelduitwisselaar publish action", "Send mail to $to ($subject) - failed",['msg' => $e->getMessage()], WATCHDOG_DEBUG);
        }
    }
}

/**
 * Implements hook_general_action
 * @param $entity
 * @param array $context
 */
function beelduitwisselaar_general_action(&$entity, $context = array())
{
    watchdog('beelduitwisselaar', 'beelduitwisselaar_general_action fired.', [], WATCHDOG_DEBUG);
    if (!empty($context['field_collection_item'])) {
        drupal_set_message(t('beelduitwisselaar_general_action fired'));
    }
}

/**
 * Implements hook_createuser_action
 * @param $entity
 * @param array $context
 */
function beelduitwisselaar_createuser_action(&$entity, $context = array())
{
    watchdog('beelduitwisselaar', 'beelduitwisselaar_createuser_action fired.', [], WATCHDOG_DEBUG);
    // @todo: is this a function which can be removed?
}

/**
 * Implements hook_form2node_action
 * @param $entity
 * @param array $context
 */
function beelduitwisselaar_form2node_action(&$entity, $context = array())
{
    watchdog('beelduitwisselaar', 'beelduitwisselaar_form2node_action fired.', [], WATCHDOG_DEBUG);
    // @todo: is this a function which can be removed?
}

/**
 * Implements hook_maillijst_action
 * @param $entity
 * @param array $context
 */
function beelduitwisselaar_maillijst_action(&$entity, $context = array())
{
    watchdog('beelduitwisselaar', 'beelduitwisselaar_maillijst_action fired.', [], WATCHDOG_DEBUG);
    // @todo: is this a function which can be removed?
    if (!empty($entity->roles[5])) {
        drupal_set_message(t('beelduitwisselaar_maillijst_action fired for ') . $entity->name);
    }
}


/**
 * Implements hook_selectexpert_action
 * @param $entity
 * @param array $context
 */
function beelduitwisselaar_selectexpert_action(&$entity, $context = array())
{
    watchdog('beelduitwisselaar', 'beelduitwisselaar_selectexpert_action fired.', [], WATCHDOG_DEBUG);

    $_SESSION['entity'] = $entity;
    $_GET['destination'] = 'beelduitwisselaar/selectexpertise';
}


/**
 * Implements hook_form_alter
 *
 * Status values (defined in content type):
 * 0|nieuw
 * 1|naarexpert
 * 2|evaluatiepositief
 * 3|evaluatienegatief
 * 4|evaluatiewacht
 * 5|afgerond
 * 6|verwijderd
 */
function beelduitwisselaar_form_alter(&$form, $form_state, $form_id)
{
    global $user;

    switch ($form_id) {
        case 'user_login':
            drupal_set_title(t('Inloggen'));
            break;
        case 'user_register_form':
            drupal_set_title(t('Registreren'));
            unset($form['field_standaard_licentie']['und']['#options']['_none'], $form['field_standaard_licentie']['und']['#options'][BEELDUITWISSELAARLICENSETERMID]);
            break;
        case 'user_profile_form':
            drupal_set_title(t('Profiel aanpassen'));
            unset($form['field_standaard_licentie']['und']['#options']['_none'], $form['field_standaard_licentie']['und']['#options'][BEELDUITWISSELAARLICENSETERMID]);
            //unset($form['field_standaard_licentie']['und']['#options'][NATUURNLLICENSETERMID]);
            $myroles = array('admin', 'administrator');
            $checkadmin = array_intersect($myroles, array_values($user->roles));
            $myroles = array('author', 'fotograaf');
            $check = array_intersect($myroles, array_values($user->roles));
            if ($check && !$checkadmin) {
                unset($form['field_specialisatie'], $form['field_originalid']);
            }
            break;
        case 'user_pass':
            drupal_set_title(t('Wachtwoord aanvragen'));
            break;
        case 'search_block_form':
            if (drupal_get_title() === "Beelduitwisselaar aanmaken") {
                drupal_set_title(t("Beelden toevoegen"));
            }
            break;
        case 'field_collection_item_form':
            if ($form['field_status']['und']['#default_value'][0] === STATUSDONE) {
                drupal_goto("/beelddetail/" . $form['#entity']->item_id);
            }
            drupal_set_title(t("Valideer beeld"));

            $form['field_opmerkingen']['und'][0]['value']['#title'] = t("Opmerkingen fotograaf");
            $form['field_status']['und']['#access'] = 0;

            //ISSUE BUIT-136
            $form['field_newimage']['und']['#suffix'] = "<b>" . $form['field_datum']['und'][0]['#title'] . "</b>: " . substr($form['field_datum']['und']['0']['#default_value']['value'], 8, 2) . "-" . substr($form['field_datum']['und']['0']['#default_value']['value'], 5, 2) . "-" . substr($form['field_datum']['und']['0']['#default_value']['value'], 0, 4) . "<br />";
            $form['field_datum']['und']['0']['value']['#attributes']['disabled'] = TRUE;
            $form['field_datum']['und']['#access'] = 0;

            //$form['field_copyright']['und']['#access'] = 0;
            //BUIT-251
            $form['field_license']['und']['#attributes']['disabled'] = FALSE;
            $form['field_license']['und']['#access'] = 0;

            $form['field_fotograaf']['und']['#attributes']['disabled'] = TRUE;
            $form['field_fotograaf']['und']['#access'] = 1;

            $form['field_created']['und']['#attributes']['disabled'] = TRUE;
            $form['field_created']['und']['#access'] = 0;

            $checkadmin = array_intersect(['admin', 'administrator'], array_values($user->roles));
            if (!$checkadmin) {
                $form['field_groep']['und']['#attributes']['disabled'] = TRUE;
                $form['field_groep']['und']['#access'] = 0;
            }

            if (array_intersect(['author', 'fotograaf'], array_values($user->roles)) && !$checkadmin) {
                $form['field_textsoortenregister']['und']['0']['value']['#attributes']['disabled'] = TRUE;
                $form['field_textsoortenregister']['und']['#access'] = 0;
            }

            if (array_intersect(['expert', 'validator', 'admin'], array_values($user->roles)) &&
                (!empty($form['field_beeldexpert']['und']['#default_value'][0])) &&
                ($form['field_beeldexpert']['und']['#default_value'][0] == $user->uid)) {

                if ($form['field_status']['und']['#default_value'][0] !== STATUSPOSITIVE) {
                    $form['field_textsoortenregister']['und']['0']['value']['#attributes']['disabled'] = TRUE;
                    $form['field_textsoortenregister']['und']['#access'] = 0;
                }
                $form['field_groep']['und']['#attributes']['disabled'] = TRUE;
                $form['field_beeldexpert']['und']['#access'] = 0;
                $form['field_datum']['und']['#attributes']['disabled'] = TRUE;
                $form['actions']['submit'] = array(
                    '#type' => 'submit',
                    '#value' => t('Opslaan en validatie afronden'),
                    '#submit' => array('beelduitwisselaar_save'),
                );
                $form['actions']['back'] = array(
                    '#markup' => "<input type='button' class='button-user' value='Annuleren' onclick='window.history.go(-1)'/>",
                    '#weight' => $form['actions']['submit']['#weight'] + 1,
                );
                if ($form['field_status']['und']['#default_value'][0] === STATUSPOSITIVE) {
                    $form['field_beeldevaluatie']['und']['0']['value']['#attributes']['disabled'] = TRUE;
                } else {
                    $form['field_locatie']['und']['0']['value']['#attributes']['disabled'] = TRUE;
                }
            } else {
                //echo "noexpert";
                $form['field_beeldevaluatie']['und']['0']['value']['#attributes']['disabled'] = TRUE;
                if (!$checkadmin) {
                    $form['field_textsoortenregister']['und']['0']['value']['#attributes']['disabled'] = TRUE;
                    $form['field_groep']['und']['#attributes']['disabled'] = TRUE;
                    $form['field_beeldexpert']['und']['#access'] = 0;
                }
                $form['field_datum']['und']['#attributes']['disabled'] = TRUE;
            }

            $form['field_opnameland']['und']['0']['value']['#attributes']['disabled'] = TRUE;
            $form['field_opmerkingen']['und']['0']['value']['#attributes']['disabled'] = TRUE;

            if (in_array('administrator', $user->roles, false)) {

                if (($form['field_status']['und']['#default_value'][0] === STATUSNEW) ||
                    ($form['field_status']['und']['#default_value'][0] === STATUSEXPERT)) {
                    $form['actions']['submit'] = array(
                        '#type' => 'submit',
                        '#value' => t('Opslaan'),
                        '#weight' => $form['actions']['submit']['#weight'] + 7,
                        '#submit' => array(
                            'beelduitwisselaar_adminsave',
                        ),
                    );
                    $form['actions']['goedgekeurd'] = array(
                        '#type' => 'submit',
                        '#value' => t('Publiceren (!)'),
                        '#weight' => $form['actions']['submit']['#weight'] + 3,
                        '#submit' => array(
                            'beelduitwisselaar_afronden',
                        ),
                    );
                    $form['actions']['afgekeurd'] = array(
                        '#type' => 'submit',
                        '#value' => t('Afwijzen'),
                        '#weight' => $form['actions']['submit']['#weight'] + 4,
                        '#submit' => array(
                            'beelduitwisselaar_afgekeurd',
                        ),
                    );
                    $form['actions']['wacht'] = array(
                        '#type' => 'submit',
                        '#value' => t('In wachtrij plaatsen'),
                        '#weight' => $form['actions']['submit']['#weight'] + 6,
                        '#submit' => array(
                            'beelduitwisselaar_wacht',
                        ),
                    );
                }

                if ($form['field_status']['und']['#default_value'][0] === STATUSPOSITIVE) {
                    $form['actions']['opslaan'] = array(
                        '#type' => 'submit',
                        '#value' => t('Opslaan'),
                        '#weight' => $form['actions']['submit']['#weight'] + 7,
                        '#submit' => array(
                            'beelduitwisselaar_reset',
                        ),
                    );
                    $form['actions']['goedgekeurd'] = array(
                        '#type' => 'submit',
                        '#value' => t('Publiceren'),
                        '#weight' => $form['actions']['submit']['#weight'] + 3,
                        '#submit' => array(
                            'beelduitwisselaar_afronden',
                        ),
                    );
                    $form['actions']['afgekeurd'] = array(
                        '#type' => 'submit',
                        '#value' => t('Afwijzen'),
                        '#weight' => $form['actions']['submit']['#weight'] + 4,
                        '#submit' => array(
                            'beelduitwisselaar_afgekeurd',
                        ),
                    );
                    $form['actions']['wacht'] = array(
                        '#type' => 'submit',
                        '#value' => t('In wachtrij plaatsen'),
                        '#weight' => $form['actions']['submit']['#weight'] + 6,
                        '#submit' => array(
                            'beelduitwisselaar_wacht',
                        ),
                    );
                    drupal_set_title(t('Gevalideerd beeld'));

                    //Node has been accepted or denied. Convert to medialib entry if accepted.
                    $form['actions']['back'] = array(
                        '#markup' => "<input type='button' class='button-user' value=" . t('Annuleren') . " onclick='window.history.go(-1)'/>",
                        '#weight' => $form['actions']['submit']['#weight'] + 1,
                    );
                    unset($form['actions']['submit']);
                }

                if ($form['field_status']['und']['#default_value'][0] === STATUSWAIT ||
                    $form['field_status']['und']['#default_value'][0] === STATUSPOSITIVE) {

                    $form['actions']['submit'] = array(
                        '#type' => 'submit',
                        '#value' => t('Opslaan'),
                        '#weight' => $form['actions']['submit']['#weight'] + 7,
                        '#submit' => array(
                            'beelduitwisselaar_adminsave',
                        ),
                    );
                    $form['actions']['afgekeurd'] = array(
                        '#type' => 'submit',
                        '#value' => t('Afwijzen'),
                        '#weight' => $form['actions']['submit']['#weight'] + 4,
                        '#submit' => array(
                            'beelduitwisselaar_afgekeurd',
                        ),
                    );
                }

            }
            break;
        case 'beelduitwisselaar_node_form':
            drupal_set_title(t('Beelden toevoegen'));
            $form['introduction']['#markup'] = '<p>' . t('Via dit formulier kunt u een of meerdere nieuwe beelden insturen. Velden die verplicht ingevuld moeten worden zijn aangegeven met een rood sterretje. Let op: de voorwaarden voor insturen van nieuwe beelden zijn gewijzigd. Lees <a href="/licentie" target="_blank">hier meer informatie</a> over de beschikbare licenties.') . '</p>';

            $form['field_woonplaats']['und'][0]['#access'] = 0;
            $form['field_land']['und'][0]['#access'] = 0;
            $form['field_fotograafref']['und'][0]['#access'] = 0;
            $form['field_akkoord']['und']['#title'] = t("<b>Ik ga akkoord met de <a href='/voorwaarden' target='_blank'>voorwaarden</a>.</b>");
            $form['actions']['submit']['#value'] = t('Verstuur beeld(en)');
            $form['field_afbeeldingen']['und']['add_more']['#value'] = t('+ Nog een beeld toevoegen');

            $hideid = 0;
            while (!empty($form['field_afbeeldingen']['und'][$hideid])) {
                $form['field_afbeeldingen']['und'][$hideid]['remove_button']['#value'] = t('Beeld en gegevens verwijderen');
                $form['field_afbeeldingen']['und'][$hideid]['field_nlsr']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_soortenregister']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_beeldexpert']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_status']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_groep']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_beeldevaluatie']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_textsoortenregister']['#access'] = 0;
                $form['field_afbeeldingen']['und'][$hideid]['field_created']['#access'] = 0;

                //Hide original Beelduitwisselaar license
                unset($form['field_afbeeldingen']['und'][$hideid]['field_license']['und']['#options']['_none']);
                unset($form['field_afbeeldingen']['und'][$hideid]['field_license']['und']['#options'][BEELDUITWISSELAARLICENSETERMID]);

                //Preselect default license (if specified)
                $user_data = user_load($user->uid);
                $myid = $user_data->field_standaard_licentie['und'][0]['tid'];
                $form['field_afbeeldingen']['und'][$hideid]['field_license']['und']['#default_value'][0] = $myid;
                $mytax = taxonomy_term_load($myid);
                $form['field_afbeeldingen']['und'][$hideid]['field_license']['und']['#options'][$myid] = $mytax->name;

                $hideid = $hideid + 1;

            }

            //Check required field. If it is empty we are in the node creation screen.
            if (empty($form['field_voornaam']['und'][0]['value']['#default_value'])) {
                //set default values based on user profile
                $myid = $user->uid;
                $sqlvoornaam = "SELECT v.field_voornaam_value voornaam FROM {field_data_field_voornaam} v WHERE v.entity_type = 'user' AND v.entity_id = :entity LIMIT 1";
                $form['field_voornaam']['und'][0]['value']['#default_value'] = db_query($sqlvoornaam, [':entity' => $myid])->FetchField();

                $sqlachternaam = "SELECT  a.field_achternaam_value achternaam FROM {field_data_field_achternaam} a WHERE a.entity_type = 'user' AND a.entity_id = :entity LIMIT 1";
                $form['field_achternaam']['und'][0]['value']['#default_value'] = db_query($sqlachternaam, [':entity' => $myid])->FetchField();

                $sqlwoonplaats = "SELECT  w.field_woonplaats_value woonplaats FROM {field_data_field_woonplaats} w WHERE w.entity_type = 'user' AND w.entity_id = :entity LIMIT 1";
                $form['field_woonplaats']['und'][0]['value']['#default_value'] = db_query($sqlwoonplaats, [':entity' => $myid])->FetchField();

                $sqlland = "SELECT l.field_land_value land FROM {field_data_field_land} l WHERE l.entity_type = 'user' AND l.entity_id = :entity LIMIT 1";
                $form['field_land']['und'][0]['value']['#default_value'] = db_query($sqlland, [':entity' => $myid])->FetchField();

                $sqlemail = "SELECT mail FROM {users} WHERE uid = :entity LIMIT 1";
                $form['field_email']['und'][0]['email']['#default_value'] = db_query($sqlemail, [':entity' => $myid])->FetchField();

                $sqlcontact = "SELECT c.field_contact_value contact FROM {field_data_field_contact} c WHERE c.entity_type = 'user' AND c.entity_id = :entity LIMIT 1";
                $form['field_contact']['und'][0]['value']['#default_value'] = db_query($sqlcontact, [':entity' => $myid])->FetchField();
            }
            break;

        case 'views_form_expert_lijst_page':
        case 'views_form_expert_lijst_page_1':
            if (!empty($form['views_bulk_operations'])) {
                $myid = 0;
                while (!empty($form['views_bulk_operations'][$myid])) {
                    $users[] = $form['views_bulk_operations'][$myid]['#return_value'];
                    $uid = $form['views_bulk_operations'][$myid]['#return_value'];
                    $mailsql = 'SELECT mail FROM {users} WHERE uid = :uid LIMIT 1';
                    $mails[] = db_query($mailsql, [':uid' => $uid])->FetchField();
                    $myid = $myid + 1;
                    $_SESSION['mymail'] = implode(",", $mails);
                }
            }
            if (!empty($form['recipient'])) {
                $form['recipient']['#default_value'] = $_SESSION['mymail'];
                $form['recipient']['#description'] = t("Aan ieder email adres wordt een aparte mail verstuurd.");
            }
        default:
            break;
    }
}

/**
 * Implements hook_node_presave().
 */
function beelduitwisselaar_node_presave($node)
{
    global $user;
    if (empty($node->original)) {
        //Set a reference to the actual image creator
        $node->field_fotograafref['und'][0]['uid'] = $user->uid;
        $node->field_fotograafref['und'][0]['target_id'] = $user->uid;
        $node->field_fotograafref['und'][0]['target_type'] = 'user';
        $node->uid = 1; //$imageownerid;
    }
}

/**
 * Implements hook_node_insert().
 */
function beelduitwisselaar_node_insert($node)
{
    global $user, $base_url;

    if (!empty($node->nid) && $node->type === 'beelduitwisselaar') {
        drupal_set_title(t('Beelden toevoegen'));
        $email = $node->field_email['und'][0]['email'];
        $sql = "SELECT name, uid FROM {users} WHERE mail = :email LIMIT 1";
        $myusername = db_query($sql, [':email' => $email]);
        if ($myusername->rowCount() === 0) {
            $new_user = array(
                'name' => $email,
                'mail' => $email,
                'init' => $email,
                'pass' => 'password',
                'status' => 1,
                'field_voornaam' => array(LANGUAGE_NONE => [['value' => $node->field_voornaam['und'][0]['value']]]),
                'field_achternaam' => array(LANGUAGE_NONE => [['value' => $node->field_achternaam['und'][0]['value']]]),
                'access' => REQUEST_TIME,
                'roles' => array(), // No other roles than Authenticated
            );

            $new_user['field_woonplaats'] = $node->field_woonplaats;
            $new_user['field_land'] = $node->field_land;
            $new_user['field_email'] = $node->field_email;
            $new_user['field_contact'] = $node->field_contact;
            $new_user = user_save(NULL, $new_user);
        }
    }
    $node->field_fotograafref['und'][0]['target_id'] = $user->uid;
    $node->field_fotograafref['und'][0]['target_type'] = 'user';

    $beeldnamen = "";
    foreach ($node->field_afbeeldingen['und'] as $beeld) {
        $myentity = entity_load_single("field_collection_item", $beeld);

        if (!empty($myentity->field_newimage['und'][0]['filename'])) {
            $beeldnamen .= $myentity->field_newimage['und'][0]['filename'] . '<br>';
        }
    }
    $mymail = node_load(MAILNEWSUBMISSION);
    $mail = $mymail->body['und'][0]['value'];
    $mail = str_replace(
        [
            '%%beeldnaam%%',
            '%%expertnaam%%',
            '%%expert_link%%',
            '%%nsr_link%%',
            '%%bestandsnamen%%'
        ],
        [
            $form['field_textsoortenregister']['und'][0]['value']['#value'],
            $user->name,
            "<a href='$base_url/?q=afbeeldingen-expert'>$user->name</a>",
            $form['field_nlsr']['und'][0]['value']['#value'],
            $beeldnamen
        ],
        $mail);
    $to = $user->mail;
    $subject = $mymail->title;
    try {
        beelduitwisselaar_sendmail($to, $subject, $mail);
    } catch (Exception $e) {
        watchdog("beelduitwisselaar", "Send mail to $to ($subject) - failed",['msg' => $e->getMessage()], WATCHDOG_DEBUG);
    }

    global $nohook;
    $nohook = 1;
    foreach ($node->field_afbeeldingen['und'] as $beeld) {
        $myentity = entity_load_single("field_collection_item", $beeld);
        $myentity->field_fotograaf['und'][0]['target_id'] = $user->uid;
        $myentity->field_fotograaf['und'][0]['target_type'] = "user";
        $myentity->field_created['und'][0]['value'] = $node->created;
        if (isset($myentity->item_id)) {
            $myentity->save(TRUE);
        } else {
            $myentity->save();
        }
    }

    drupal_goto("/afbeeldingen-user");
}


/**
 * @param $entity
 * @param $type
 */
function beelduitwisselaar_entity_update($entity, $type)
{
    global $user, $nohook;

    if ($type === "field_collection_item" && !$nohook) {
        if (($entity->field_status['und'][0]['value'] === 0) && (!empty($entity->field_beeldexpert['und'][0]))) {
            $sql = 'UPDATE {field_data_field_status} SET field_status_value = 1 WHERE bundle = \'field_afbeeldingen\' AND entity_id = :entity AND revision_id = :revision';
            db_query($sql, [':entity' => $entity->item_id, ':revision' => $entity->revision_id]);
            $sql = 'UPDATE {field_revision_field_status} SET field_status_value = 1 WHERE bundle = \'field_afbeeldingen\' AND entity_id = :entity AND revision_id = :revision';
            db_query($sql, [':entity' => $entity->item_id, ':revision' => $entity->revision_id]);
        }

        //If admin
        if (array_intersect(['admin', 'administrator'], array_values($user->roles))) {
            beelduitwisselaar_goto_lastview();
        }
        if (array_intersect(['expert', 'validator'], array_values($user->roles))) {
            drupal_goto('/afbeeldingen-expert');
        }
    }
}


/**
 * Status values (defined in content type):
 * 0|nieuw
 * 1|naarexpert
 * 2|evaluatiepositief
 * 3|evaluatienegatief
 * 4|evaluatiewacht
 * 5|afgerond
 * 6|verwijderd
 *
 * @param $form
 * @param $form_state
 */
function beelduitwisselaar_goedgekeurd(&$form, &$form_state)
{
    global $user;
    if (empty($form['field_soort_taxon']['und'][0]['value']['#value'])) {
        drupal_set_message(t("Geen soort/taxon opgegeven! Graag een soort/taxon selecteren."), "error");
        return;
    }
    if (empty($form['field_nlsr']['und'][0]['value']['#value'])) {
        drupal_set_message(t("Geen correcte soort opgegeven! Graag een soort/taxon selecteren."), "error");
        return;
    }
    drupal_set_message(t("Afbeelding goedgekeurd voor publicatie op Soortenregister."));
    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);
    $myentity->field_status['und'][0]['value'] = STATUSPOSITIVE;
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];
    $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];
    if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
    }
    $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];

    $myentity->save();

    beelduitwisselaar_goto_lastview();
}

/**
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function beelduitwisselaar_afgekeurd(&$form, &$form_state)
{
    global $user, $base_url;

    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);

    $myentity->field_status['und'][0]['value'] = STATUSNEGATIVE;
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];
    $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];
    if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
    }
    $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];

    $mymail = node_load(MAILDECLINESUBMISSION);
    $mailbody = $mymail->body['und'][0]['value'];
    $mail = str_replace(
        [
            '%%beeldnaam%%',
            '%%expertnaam%%',
            '%%expert_link%%',
            '%%nsr_link%%',
            '%%bestandsnamen%%'
        ],
        [
            $myentity->field_newimage['und'][0]['#file']->filename,
            $user->name,
            "<a href='$base_url/?q=afbeeldingen-expert'>{$user->name}</a>",
            "<a href='http://www.nederlandsesoorten.nl/nsr/concept/{$form['field_nlsr']['und'][0]['value']['#value']}>{$form['field_soort_taxon']['und'][0]['value']['#value']}</a>",
            $form['#entity']->item_id
        ],
        $mailbody);

    $nodeid = arg(2);
    variable_set("beelduitwisselaar_entityid", $nodeid);

    drupal_goto("/beelduitwisselaar/createmail/" . $fotograafid . "/" .  MAILDECLINESUBMISSION . "/" . $nodeid);
}


/**
 * @param $form
 * @param $form_state
 */
function beelduitwisselaar_reset(&$form, &$form_state)
{
    global $user;

    drupal_set_message(t("Beeld gereset"));
    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);
    $myentity->field_status['und'][0]['value'] = $form['field_status']['und'][0]['value']['#value'];
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#value'];
    if (empty($myentity->field_beeldevaluatie['und'][0]['value'])) {
        $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#default_value'];
    }
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];
    $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];
    if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
    }
    $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];
    if (isset($myentity->item_id)) {
        $myentity->save(TRUE);
    } else {
        $myentity->save();
    }

    beelduitwisselaar_goto_lastview();
}

/**
 * @param $form
 * @param $form_state
 */
function beelduitwisselaar_adminsave(&$form, &$form_state)
{
    $beeldevaluatie = $form['field_beeldevaluatie']['und'][0]['value']['#value'];
    if (empty($beeldevaluatie)) {
        $beeldevaluatie = $form['field_beeldevaluatie']['und'][0]['value']['#default_value'];
    }

    $myentity = entity_load_single('field_collection_item', $form['#entity']->item_id);
    if (!empty($form['field_groep']['und']['#value'])) {
        if ($form['field_groep']['und']['#value'] !== '_none') {
            $myentity->field_groep['und'][0]['tid'] = $form['field_groep']['und']['#value'];
        }
    }
    if (!empty($form['field_nlsr']['und'][0]['value'])) {
        $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    }
    $myentity->field_beeldevaluatie['und'][0]['value'] = $beeldevaluatie;
    if (!empty($form['field_soort_taxon']['und'][0]['value'])) {
        $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];

    if (!empty($form['field_opmerkingen']['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];
    }
    if (!empty($form['field_opmerkingen']['und'][0]['value'])) {
        if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
            $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
        }
    }
    if (!empty($form['field_textsoortenregister']['und'][0]['value'])) {
        $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];
    }
    if (!empty($form['field_locatie']['und'][0]['value'])) {
        $myentity->field_locatie['und'][0]['value'] = $form['field_locatie']['und'][0]['value']['#value'];
    }
    if (!empty($form['field_beeldexpert']['und']['#value'])) {

        $isexpert = (int) $form['field_beeldexpert']['und']['#value'];
        if ($isexpert > 0) {
            $myentity->field_beeldexpert['und'][0]['target_id'] = $form['field_beeldexpert']['und']['#value'];
            $myentity->field_beeldexpert['und'][0]['target_type'] = 'user';
            $myentity->field_status['und'][0]['value'] = STATUSEXPERT;
        }

        if (!empty($myentity->field_nlsr['und'][0]['value'])) {
            $myentity->field_status['und'][0]['value'] = STATUSPOSITIVE;
        }

    }

    if (isset($myentity->item_id)) {
        search_api_track_item_change("field_collection_item", array($myentity->item_id));

        $myentity->save(TRUE);
    } else {
        $myentity->save();
    }
    drupal_goto("/afbeeldingen-expert");
}


/**
 * Save the image after editing
 * @param $form
 * @param $form_state
 */
function beelduitwisselaar_save(&$form, &$form_state)
{
    if (empty($form['field_soort_taxon']['und'][0]['value']['#value'])) {
        drupal_set_message(t("Geen soort/taxon opgegeven! Graag een soort/taxon selecteren."), "error");
        return;
    }
    if (empty($form['field_nlsr']['und'][0]['value']['#value'])) {
        drupal_set_message(t("Geen correcte Nederlandse soort opgegeven! Graag een soort/taxon selecteren."), "error");
        return;
    }

    drupal_set_message(t("Beeld gevalideerd"));

    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);
    $myentity->field_status['und'][0]['value'] = STATUSPOSITIVE;
    $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#value'];
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];
    $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];

    if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
    }

    $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#value'];
    if (empty($myentity->field_beeldevaluatie['und'][0]['value'])) {
        $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#default_value'];
    }
    $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];
    if (isset($myentity->item_id)) {
        search_api_track_item_change("field_collection_item", array($myentity->item_id));
        $myentity->save(TRUE);
    } else {
        $myentity->save();
    }
    drupal_goto("/afbeeldingen-expert");
}

/**
 * Puts the image in the waiting queue
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function beelduitwisselaar_wacht(&$form, &$form_state)
{
    global $user, $base_url;

    drupal_set_message(t("Beeld is in de wachtrij geplaatst."));

    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);
    $myentity->field_status['und'][0]['value'] = STATUSWAIT;
    $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#value'];
    if (empty($myentity->field_beeldevaluatie['und'][0]['value'])) {
        $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#default_value'];
    }
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];
    $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];
    if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
    }
    $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];

    $nodeid = arg(2);

    $fotograafid = $myentity->field_fotograaf['und'][0]['target_id'];

    $sql = 'UPDATE {field_data_field_status} SET field_status_value = :status WHERE bundle="field_afbeeldingen" AND entity_id = :entity AND revision_id = :revision';
    db_query($sql,[ STATUSWAIT, $myentity->item_id, $myentity->revision_id ]);


    drupal_goto("/beelduitwisselaar/createmail/" . $fotograafid . "/" . MAILWAITSUBMISSION . "/" . $nodeid);
}

/**
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function beelduitwisselaar_afronden(&$form, &$form_state)
{
    global $user, $base_url;

    $beeldexpert =(int)$form['field_beeldexpert']['und']['#value'];
    if (empty($form['field_soort_taxon']['und'][0]['value']['#value']) || empty($form['field_nlsr']['und'][0]['value']['#value']) || ($beeldexpert === 0)) {
        drupal_set_message(t("Niet alle velden zijn ingevuld. Voor publicatie moeten de velden 'Soort/taxon' en 'Validator' ingevuld zijn. Beeld is niet gepubliceerd"), 'warning');

        beelduitwisselaar_goto_lastview();
    }

    drupal_set_message(t("Beeld gepubliceerd"));
    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);
    $myentity->field_status['und'][0]['value'] = STATUSDONE;
    $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#value'];
    if (empty($myentity->field_beeldevaluatie['und'][0]['value'])) {
        $myentity->field_beeldevaluatie['und'][0]['value'] = $form['field_beeldevaluatie']['und'][0]['value']['#default_value'];
    }
    $myentity->field_nlsr['und'][0]['value'] = $form['field_nlsr']['und'][0]['value']['#value'];
    $myentity->field_soort_taxon['und'][0]['value'] = $form['field_soort_taxon']['und'][0]['value']['#value'];
    if (empty($myentity->field_beeldexpert['und'][0]['target_id']) || ($myentity->field_beeldexpert['und'][0]['target_id'] === 1)) {
        $myentity->field_beeldexpert['und'][0]['target_id'] = (int)($form['field_beeldexpert']['und']['#value']);
        $myentity->field_beeldexpert['und'][0]['target_type'] = "user";
    }
    $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#value'];
    if (empty($myentity->field_opmerkingen['und'][0]['value'])) {
        $myentity->field_opmerkingen['und'][0]['value'] = $form['field_opmerkingen']['und'][0]['value']['#default_value'];
    }
    $myentity->field_textsoortenregister['und'][0]['value'] = $form['field_textsoortenregister']['und'][0]['value']['#value'];
    $myentity->field_locatie['und'][0]['value'] = $form['field_locatie']['und'][0]['value']['#value'];
    $myentity->field_datum_publicatie['und'][0]['value'] = time();

    //Send to medialib
    //Stuur mail goedgekeurd
    $mymail = node_load(MAILACCEPTSUBMISSION);
    $mailbody = $mymail->body['und'][0]['value'];

    $mail = str_replace(
        [
            '%%beeldnaam%%',
            '%%expertnaam%%',
            '%%expert_link%%',
            '%%nsr_link%%',
            '%%bestandsnamen%%'
        ],
        [
            $form['field_newimage']['und'][0]['#file']->filename,
            $user->name,
            '<a href="' . $base_url . '/?q=afbeeldingen-expert">' . $user->name . '</a>',
            '<a href="' . NSR_LINK . $form['field_nlsr']['und'][0]['value']['#value'] . '">' . $form['field_soort_taxon']['und'][0]['value']['#value'] . '</a>',
            $form["#entity"]->item_id
        ],
        $mailbody
    );

    $fotograafid = $myentity->field_fotograaf['und'][0]['target_id'];
    $defotograaf = user_load($fotograafid);

    $to = $defotograaf->mail;
    $subject = $mymail->title;

    try {
        beelduitwisselaar_sendmail($to, $subject, $mail);
    } catch (Exception $e) {
        watchdog("beelduitwisselaar", "Send mail to $to ($subject) - failed",['msg' => $e->getMessage()], WATCHDOG_DEBUG);
    }

    if (isset($myentity->item_id)) {
        search_api_track_item_change("field_collection_item", array($myentity->item_id));
        $myentity->save(TRUE);
    } else {
        $myentity->save();
    }

    beelduitwisselaar_goto_lastview();
}


/**
 * @todo: this function is probably not called at all!
 *
 * @param $form
 * @param $form_state
 */
function beelduitwisselaar_verwijderd(&$form, &$form_state)
{
    drupal_set_message(t("Afbeelding verwijderd"));
    $myentity = entity_load_single("field_collection_item", $form["#entity"]->item_id);
    $myentity->field_status['und'][0]['value'] = STATUSDELETED;
    $myentity->save();

    drupal_goto("/afbeeldingen");
}

/**
 * implementation of hook_form_submit, saves the expert info in a variable
 *
 * @param $form
 * @param $form_state
 */
function beelduitwisselaar_form_submit(&$form, &$form_state)
{
    variable_set("default-expert", $form_state['values']['expert']);
}

/**
 *
 * @param $field_collection_item
 * @param $view_mode
 * @param $langcode
 */
function beelduitwisselaar_field_collection_item_view($field_collection_item, $view_mode, $langcode)
{
    if ($view_mode === 'full') {
        drupal_set_title(t('Ingestuurd beeld'));
    }
}


/**
 * Implements hook_search_api_index_items_alter().
 *
 * @param array $items
 * @param SearchApiIndex $index
 */
function beelduitwisselaar_search_api_index_items_alter(array &$items, SearchApiIndex $index)
{
    foreach ($items as $id => $item) {
        if (isset($item->field_status) && ($item->field_status[key($item->field_status)][0]['value'] === STATUSDONE)) {
            unset($items[$id]);
        }
    }
}


/**
 * @param $element
 * @param $form_state
 * @param $context
 */
function beelduitwisselaar_date_select_process_alter(&$element, &$form_state, $context)
{
    if ($element['#field']['field_name'] === 'field_datum') {
        $element['year']['#options'] = array_reverse($element['year']['#options'], true);
    }
    $element['year']['#default_value'] = date('Y');
}
